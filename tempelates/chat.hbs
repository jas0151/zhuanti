<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with {{otherUser.profile.firstName}} - CampusMatch</title>
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="/chat.css">
    <link rel="stylesheet" href="/chat-enhanced.css">
    <!-- Socket.IO client library -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
        /* Additional styles to improve UI */
        .chat-container {
            display: flex;
            height: calc(100vh - 70px);
            background-color: #f5f7fb;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .chat-sidebar {
            width: 300px;
            background-color: #fff;
            border-right: 1px solid #e0e0e0;
            display: flex;
            flex-direction: column;
        }
        
        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: #fff;
        }
        
        .chat-header {
            padding: 15px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
        }
        
        .user-details h3 {
            margin: 0;
            font-weight: 600;
        }
        
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            background-color: #f5f7fb;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 80%;
            clear: both;
        }
        
        .message.outgoing {
            float: right;
            background-color: #4F46E5;
            color: white;
            border-radius: 15px 15px 0 15px;
        }
        
        .message.incoming {
            float: left;
            background-color: #fff;
            color: #333;
            border-radius: 15px 15px 15px 0;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }
        
        .message-content {
            padding: 10px 15px;
        }
        
        .message-time {
            font-size: 11px;
            opacity: 0.7;
            display: block;
            margin-top: 5px;
            text-align: right;
        }
        
        .message-form {
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #e0e0e0;
        }
        
        .message-input-container {
            display: flex;
            align-items: center;
            background: #f5f7fb;
            border-radius: 24px;
            padding: 6px 10px;
        }
        
        #messageInput {
            flex: 1;
            border: none;
            padding: 8px 10px;
            background: transparent;
            outline: none;
        }
        
        #sendButton {
            background: #4F46E5;
            color: white;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .typing-indicator {
            padding: 10px 15px;
            clear: both;
            color: #666;
            font-size: 12px;
        }
        
        .typing-animation {
            display: inline-flex;
            align-items: center;
        }
        
        .typing-animation span {
            width: 6px;
            height: 6px;
            background-color: #888;
            border-radius: 50%;
            margin: 0 1px;
            display: inline-block;
            animation: typing 1.4s infinite ease-in-out both;
        }
        
        .typing-animation span:nth-child(1) { 
            animation-delay: 0s;
        }
        
        .typing-animation span:nth-child(2) { 
            animation-delay: 0.2s;
        }
        
        .typing-animation span:nth-child(3) { 
            animation-delay: 0.4s;
        }
        
        @keyframes typing {
            0%, 80%, 100% { transform: scale(0.8); }
            40% { transform: scale(1.2); }
        }
        
        .empty-chat {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #888;
            text-align: center;
            padding: 30px;
        }
        
        .empty-chat-icon {
            font-size: 48px;
            margin-bottom: 20px;
            color: #4F46E5;
            opacity: 0.5;
        }
        
        .conversation-starters {
            margin-top: 30px;
            width: 100%;
            max-width: 500px;
        }
        
        .starter-chips {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
        }
        
        .starter-chip {
            background-color: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 18px;
            padding: 8px 16px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .starter-chip:hover {
            background-color: #4F46E5;
            color: white;
            border-color: #4F46E5;
        }
        
        .connection-status {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }
        
        .connection-status.show {
            opacity: 1;
        }
        
        .connection-status .status-icon {
            margin-right: 8px;
        }
    </style>
</head>
<body data-current-user-id="{{currentUser._id}}" data-other-user-id="{{otherUser._id}}" data-user-id="{{session.userId}}" data-user-name="{{session.userName}}">
    <!-- Standardized Navbar -->
    <nav class="navbar">
        <div class="nav-container">
            <a href="/" class="nav-logo">CampusMatch</a>
            <div class="nav-menu">
                <ul class="nav-list">
                    <li><a href="/main" class="nav-link"><i class='bx bx-home'></i> <span>Dashboard</span></a></li>
                    <li><a href="/gallery" class="nav-link"><i class='bx bx-images'></i> <span>Gallery</span></a></li>
                    <li><a href="/matches" class="nav-link"><i class='bx bx-heart'></i> <span>Matches</span></a></li>
                    <li><a href="/connections" class="nav-link"><i class='bx bx-user-check'></i> <span>Connections</span></a></li>
                    <li><a href="/logout" class="nav-signup"><i class='bx bx-log-out'></i> <span>Logout</span></a></li>
                </ul>
            </div>
            <div class="mobile-menu-toggle">
                <i class='bx bx-menu'></i>
            </div>
        </div>
    </nav>

    <div class="chat-container">
        <div class="chat-sidebar">
            <div class="sidebar-header">
                <h2>Your Connections</h2>
                <a href="/connections" class="manage-link">
                    <i class='bx bx-cog'></i>
                </a>
            </div>
            <div class="search-box">
                <i class='bx bx-search'></i>
                <input type="text" placeholder="Search connections...">
            </div>
            <div class="connection-list">
                <!-- This will be populated by JavaScript -->
                <div class="loading-connections">
                    <i class='bx bx-loader-alt bx-spin'></i>
                    <span>Loading connections...</span>
                </div>
            </div>
        </div>
        
        <div class="chat-main">
            <div class="chat-header">
                <button class="mobile-sidebar-toggle">
                    <i class='bx bx-menu'></i>
                </button>
                
                <div class="chat-user-info">
                    <div class="avatar">
                        {{#if otherUser.profile.photo}}
                            <img src="/photo/{{otherUser._id}}" alt="{{otherUser.profile.firstName}}">
                        {{else}}
                            <img src="/default-avatar.png" alt="Default Avatar">
                        {{/if}}
                        <span class="status-indicator {{#if otherUser.isOnline}}online{{else}}offline{{/if}}"></span>
                    </div>
                    <div class="user-details">
                        <h3>{{otherUser.profile.firstName}} {{otherUser.profile.lastName}}</h3>
                        <p class="user-status">
                            {{#if otherUser.isOnline}}
                                <i class='bx bxs-circle online'></i> Online
                            {{else}}
                                <i class='bx bxs-circle offline'></i> Last seen {{formatTimeAgo otherUser.lastActive}}
                            {{/if}}
                        </p>
                    </div>
                </div>
                <div class="chat-actions">
                    <button class="mobile-info-toggle">
                        <i class='bx bx-info-circle'></i>
                    </button>
                    <a href="/view-profile/{{otherUser._id}}" class="action-btn">
                        <i class='bx bx-user'></i>
                        <span>View Profile</span>
                    </a>
                </div>
            </div>
            
            <div class="messages-container" id="messagesContainer">
                <!-- Messages will be loaded by JavaScript -->
                <div class="empty-chat">
                    <div class="empty-chat-icon">
                        <i class='bx bx-message-square-detail'></i>
                    </div>
                    <h3>Start a Conversation</h3>
                    <p>Send a message to begin chatting with {{otherUser.profile.firstName}}</p>
                    
                    {{#if commonInterests}}
                        <div class="conversation-starters">
                            <h4>Conversation Starters</h4>
                            <div class="starter-chips">
                                {{#each starters}}
                                    <button class="starter-chip">{{this}}</button>
                                {{/each}}
                            </div>
                        </div>
                    {{/if}}
                </div>
            </div>
            
            <form id="messageForm" class="message-form">
              <div class="message-input-container">
                <button type="button" id="emojiButton" class="emoji-btn">
                    <i class='bx bx-smile'></i>
                </button>
                
                <input type="text" id="messageInput" name="message" placeholder="Type a message..." autocomplete="off">
                
                <button id="sendButton" type="submit">
                  <i class='bx bx-send'></i>
                </button>
              </div>
              
              <!-- Emoji Picker -->
              <div id="emojiPicker" class="emoji-picker">
                <div class="emoji">😊</div>
                <div class="emoji">😂</div>
                <div class="emoji">❤️</div>
                <div class="emoji">👍</div>
                <div class="emoji">🎉</div>
                <div class="emoji">😍</div>
                <div class="emoji">🥰</div>
                <div class="emoji">😎</div>
                <div class="emoji">🤔</div>
                <div class="emoji">👋</div>
                <div class="emoji">👏</div>
                <div class="emoji">🙏</div>
                <div class="emoji">🔥</div>
                <div class="emoji">💯</div>
                <div class="emoji">🤣</div>
                <div class="emoji">😭</div>
                <div class="emoji">😢</div>
                <div class="emoji">🥺</div>
                <div class="emoji">😉</div>
                <div class="emoji">😁</div>
              </div>
            </form>
        </div>
    </div>

    <!-- Connection status indicator -->
    <div id="connectionStatus" class="connection-status">
        <div class="status-icon connecting">
            <i class='bx bx-wifi'></i>
        </div>
        <span class="status-text">Connecting...</span>
    </div>

    <!-- Enhanced Chat.js script -->
    <script>
    // Enhanced chat script with real-time functionality
    document.addEventListener('DOMContentLoaded', () => {
        // DOM elements
        const messagesContainer = document.getElementById('messagesContainer');
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const emojiPicker = document.getElementById('emojiPicker');
        const emojiButton = document.getElementById('emojiButton');
        const emojis = document.querySelectorAll('.emoji');
        const emptyChatDiv = document.querySelector('.empty-chat');
        const connectionStatus = document.getElementById('connectionStatus');
        
        // User information from data attributes
        const currentUserId = document.body.dataset.currentUserId;
        const otherUserId = document.body.dataset.otherUserId;
        
        // Socket.io connection
        let socket;
        let typingTimeout;
        
        // Initialize socket connection
        function initializeSocket() {
            try {
                console.log('Initializing Socket.IO connection...');
                updateConnectionStatus('connecting');
                
                socket = io();
                
                socket.on('connect', () => {
                    console.log('Socket.IO connected successfully');
                    updateConnectionStatus('connected');
                    
                    // Join chat room
                    socket.emit('join chat', {
                        userId: currentUserId,
                        otherUserId: otherUserId
                    });
                });
                
                socket.on('disconnect', () => {
                    console.log('Socket.IO disconnected');
                    updateConnectionStatus('disconnected');
                });
                
                // Handle receiving messages
                socket.on('message', (data) => {
                    console.log('Received message:', data);
                    
                    // Hide empty chat if visible
                    if (emptyChatDiv) {
                        emptyChatDiv.style.display = 'none';
                    }
                    
                    // Process the received message
                    if (data.sender === currentUserId) {
                        // Update our own message status
                        updateLastMessageStatus('sent');
                    } else {
                        // Add the other user's message to UI
                        addMessageToUI({
                            sender: data.sender,
                            content: data.content,
                            timestamp: new Date(data.timestamp),
                            status: 'received'
                        });
                        
                        // Mark as seen
                        socket.emit('message seen', {
                            sender: currentUserId,
                            receiver: data.sender
                        });
                    }
                });
                
                // Handle typing indicators
                socket.on('typing', (data) => {
                    if (data.userId === otherUserId) {
                        showTypingIndicator();
                    }
                });
                
                socket.on('stop typing', (data) => {
                    if (data.userId === otherUserId) {
                        hideTypingIndicator();
                    }
                });
                
                // Handle message seen
                socket.on('message seen', (data) => {
                    if (data.reader === otherUserId) {
                        // Other user has seen our messages
                        updateLastMessageStatus('read');
                    }
                });
                
                // Handle user status updates
                socket.on('user status', (data) => {
                    if (data.userId === otherUserId) {
                        updateUserStatus(data.status, data.lastActive);
                    }
                });
            } catch (error) {
                console.error('Error initializing Socket.IO:', error);
                updateConnectionStatus('disconnected');
            }
        }
        
        // Initialize Socket.IO
        initializeSocket();
        
        // Load existing messages from server
        function loadExistingMessages() {
            fetch(`/api/messages/${otherUserId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.messages && data.messages.length > 0) {
                        // Hide empty chat
                        if (emptyChatDiv) {
                            emptyChatDiv.style.display = 'none';
                        }
                        
                        // Add messages to UI
                        data.messages.forEach(msg => {
                            if (msg.sender === 'system') {
                                // Handle system messages
                                addSystemMessage(msg.content);
                            } else {
                                addMessageToUI({
                                    sender: msg.sender,
                                    content: msg.content,
                                    timestamp: new Date(msg.timestamp),
                                    status: msg.read ? 'read' : (msg.delivered ? 'delivered' : 'sent')
                                });
                            }
                        });
                        
                        // Scroll to bottom
                        scrollToBottom();
                        
                        // Mark messages as read
                        fetch(`/api/messages/read/${otherUserId}`, {
                            method: 'POST'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error loading messages:', error);
                });
        }
        
        // Load existing messages
        loadExistingMessages();
        
        // Set up form submission for sending messages
        if (messageForm) {
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                sendMessage();
            });
            
            if (sendButton) {
                sendButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    sendMessage();
                });
            }
            
            // Handle typing events
            if (messageInput) {
                messageInput.addEventListener('input', function() {
                    // Clear existing timeout
                    if (typingTimeout) clearTimeout(typingTimeout);
                    
                    // Send typing indicator
                    if (socket && socket.connected) {
                        socket.emit('typing', {
                            sender: currentUserId,
                            receiver: otherUserId
                        });
                        
                        // Set timeout to stop typing
                        typingTimeout = setTimeout(() => {
                            socket.emit('stop typing', {
                                sender: currentUserId,
                                receiver: otherUserId
                            });
                        }, 3000); // Stop typing after 3 seconds of inactivity
                    }
                });
            }
        }
        
        // Initialize starter chips if they exist
        const starterChips = document.querySelectorAll('.starter-chip');
        if (starterChips.length > 0) {
            starterChips.forEach(chip => {
                chip.addEventListener('click', function() {
                    if (messageInput) {
                        messageInput.value = this.textContent;
                        messageInput.focus();
                    }
                });
            });
        }
        
        // Set up emoji picker
        if (emojiButton && emojiPicker) {
            emojiButton.addEventListener('click', function() {
                emojiPicker.classList.toggle('show');
            });
            
            // Add emojis to input when clicked
            emojis.forEach(emoji => {
                emoji.addEventListener('click', function() {
                    messageInput.value += this.textContent;
                    messageInput.focus();
                    emojiPicker.classList.remove('show');
                });
            });
            
            // Close emoji picker when clicking outside
            document.addEventListener('click', function(e) {
                if (emojiPicker.classList.contains('show') && 
                    !emojiPicker.contains(e.target) && 
                    e.target !== emojiButton) {
                    emojiPicker.classList.remove('show');
                }
            });
        }
        
        // Send message function
        function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Add message to UI immediately
            addMessageToUI({
                sender: currentUserId,
                content: message,
                timestamp: new Date(),
                status: 'sending'
            });
            
            // Clear input
            messageInput.value = '';
            
            // Hide empty chat if visible
            if (emptyChatDiv) {
                emptyChatDiv.style.display = 'none';
            }
            
            // Try to send via Socket.IO first
            if (socket && socket.connected) {
                socket.emit('send message', {
                    sender: currentUserId,
                    receiver: otherUserId,
                    content: message,
                    timestamp: new Date()
                });
                
                // Clear typing indicator
                clearTimeout(typingTimeout);
                socket.emit('stop typing', {
                    sender: currentUserId,
                    receiver: otherUserId
                });
            } else {
                // Fallback to HTTP if socket not available
                console.log('Socket not connected, using HTTP fallback');
                fetch(`/chat/${otherUserId}?message=${encodeURIComponent(message)}`, {
                    method: 'GET'
                })
                .then(response => {
                    // Update message status
                    updateLastMessageStatus('sent');
                })
                .catch(error => {
                    console.error('Error sending message via HTTP:', error);
                    updateLastMessageStatus('error');
                });
            }
        }
        
        // Add message to UI
        function addMessageToUI(messageData) {
            const { sender, content, timestamp, status = 'sent' } = messageData;
            
            // Create message element
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender === currentUserId ? 'outgoing' : 'incoming'}`;
            
            // Format timestamp
            const messageTime = new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            // Create message status indicator for outgoing messages
            let statusIcon = '';
            if (sender === currentUserId) {
                switch (status) {
                    case 'sending':
                        statusIcon = '<span class="message-status"><i class="bx bx-time"></i></span>';
                        break;
                    case 'sent':
                        statusIcon = '<span class="message-status"><i class="bx bx-check"></i></span>';
                        break;
                    case 'delivered':
                        statusIcon = '<span class="message-status"><i class="bx bx-check-double"></i></span>';
                        break;
                    case 'read':
                        statusIcon = '<span class="message-status status-read"><i class="bx bx-check-double"></i></span>';
                        break;
                    case 'error':
                        statusIcon = '<span class="message-status status-error"><i class="bx bx-error"></i></span>';
                        break;
                }
            }
            
            // Set message content
            messageDiv.innerHTML = `
                <div class="message-content">
                    <p>${content}</p>
                    <span class="message-time">${messageTime} ${statusIcon}</span>
                </div>
            `;
            
            // Add to container
            messagesContainer.appendChild(messageDiv);
            
            // Scroll to bottom
            scrollToBottom();
        }
        
        // Add system message
        function addSystemMessage(content) {
            const systemMsg = document.createElement('div');
            systemMsg.className = 'message system';
            systemMsg.innerHTML = `
                <div class="message-content">
                    <p>${content}</p>
                </div>
            `;
            messagesContainer.appendChild(systemMsg);
            scrollToBottom();
        }
        
        // Update last message status
        function updateLastMessageStatus(status) {
            const outgoingMessages = messagesContainer.querySelectorAll('.message.outgoing');
            if (outgoingMessages.length === 0) return;
            
            const lastMessage = outgoingMessages[outgoingMessages.length - 1];
            const statusElement = lastMessage.querySelector('.message-status');
            
            if (statusElement) {
                // Remove all status classes
                statusElement.className = 'message-status';
                
                // Add specific status class if needed
                if (status === 'read') {
                    statusElement.classList.add('status-read');
                } else if (status === 'error') {
                    statusElement.classList.add('status-error');
                }
                
                // Update icon
                switch (status) {
                    case 'sending':
                        statusElement.innerHTML = '<i class="bx bx-time"></i>';
                        break;
                    case 'sent':
                        statusElement.innerHTML = '<i class="bx bx-check"></i>';
                        break;
                    case 'delivered':
                        statusElement.innerHTML = '<i class="bx bx-check-double"></i>';
                        break;
                    case 'read':
                        statusElement.innerHTML = '<i class="bx bx-check-double"></i>';
                        break;
                    case 'error':
                        statusElement.innerHTML = '<i class="bx bx-error"></i>';
                        break;
                }
            }
        }
        
        // Show typing indicator
        function showTypingIndicator() {
            // Remove existing typing indicator if any
            hideTypingIndicator();
            
            // Create typing indicator
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.innerHTML = `
                <div class="typing-animation">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            `;
            
            // Add to container
            messagesContainer.appendChild(typingIndicator);
            
            // Scroll to bottom
            scrollToBottom();
        }
        
        // Hide typing indicator
        function hideTypingIndicator() {
            const existingIndicator = messagesContainer.querySelector('.typing-indicator');
            if (existingIndicator) {
                existingIndicator.remove();
            }
        }
        
        // Update user status in UI
        function updateUserStatus(status, lastActive) {
            const statusIndicator = document.querySelector('.avatar .status-indicator');
            const statusText = document.querySelector('.user-status');
            
            if (statusIndicator) {
                statusIndicator.className = `status-indicator ${status === 'online' ? 'online' : 'offline'}`;
            }
            
            if (statusText) {
                if (status === 'online') {
                    statusText.innerHTML = '<i class="bx bxs-circle online"></i> Online';
                } else {
                    // Format last active
                    let lastSeen = 'Offline';
                    if (lastActive) {
                        const now = new Date();
                        const lastActiveDate = new Date(lastActive);
                        const diffMinutes = Math.floor((now - lastActiveDate) / 60000);
                        
                        if (diffMinutes < 1) {
                            lastSeen = 'Last seen just now';
                        } else if (diffMinutes < 60) {
                            lastSeen = `Last seen ${diffMinutes} ${diffMinutes === 1 ? 'minute' : 'minutes'} ago`;
                        } else {
                            const diffHours = Math.floor(diffMinutes / 60);
                            if (diffHours < 24) {
                                lastSeen = `Last seen ${diffHours} ${diffHours === 1 ? 'hour' : 'hours'} ago`;
                            } else {
                                const diffDays = Math.floor(diffHours / 24);
                                lastSeen = `Last seen ${diffDays} ${diffDays === 1 ? 'day' : 'days'} ago`;
                            }
                        }
                    }
                    
                    statusText.innerHTML = `<i class="bx bxs-circle offline"></i> ${lastSeen}`;
                }
            }
        }
        
        // Update connection status indicator
        function updateConnectionStatus(status) {
            if (!connectionStatus) return;
            
            connectionStatus.className = `connection-status ${status}`;
            const statusIcon = connectionStatus.querySelector('.status-icon');
            const statusText = connectionStatus.querySelector('.status-text');
            
            if (statusIcon && statusText) {
                switch (status) {
                    case 'connected':
                        statusIcon.innerHTML = '<i class="bx bx-wifi"></i>';
                        statusText.textContent = 'Connected';
                        connectionStatus.classList.add('show');
                        setTimeout(() => {
                            connectionStatus.classList.remove('show');
                            }, 3000);
                        break;
                    case 'connecting':
                        statusIcon.innerHTML = '<i class="bx bx-loader-alt bx-spin"></i>';
                        statusText.textContent = 'Connecting...';
                        connectionStatus.classList.add('show');
                        break;
                    case 'disconnected':
                        statusIcon.innerHTML = '<i class="bx bx-wifi-off"></i>';
                        statusText.textContent = 'Disconnected';
                        connectionStatus.classList.add('show');
                        break;
                }
            }
        }
        
        // Scroll to bottom of messages container
        function scrollToBottom() {
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }
        
        // Initialize on page load
        loadExistingMessages();
    });
    </script>
</body>
</html>